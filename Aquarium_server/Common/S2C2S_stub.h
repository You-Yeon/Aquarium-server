  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "S2C2S_common.h"

     
namespace S2C2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestLogin ( ::Proud::HostID, ::Proud::RmiContext& , const std::wstring & , const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_S2C2S_RequestLogin bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & id, const std::wstring & password) PN_OVERRIDE

#define DEFRMI_S2C2S_RequestLogin(DerivedClass) bool DerivedClass::RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & id, const std::wstring & password)
#define CALL_S2C2S_RequestLogin RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & id, const std::wstring & password)
#define PARAM_S2C2S_RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & id, const std::wstring & password)
               
		virtual bool NotifyLoginSuccess ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_S2C2S_NotifyLoginSuccess bool NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_S2C2S_NotifyLoginSuccess(DerivedClass) bool DerivedClass::NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_S2C2S_NotifyLoginSuccess NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_S2C2S_NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool NotifyLoginFailed ( ::Proud::HostID, ::Proud::RmiContext& , const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_S2C2S_NotifyLoginFailed bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & reason) PN_OVERRIDE

#define DEFRMI_S2C2S_NotifyLoginFailed(DerivedClass) bool DerivedClass::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & reason)
#define CALL_S2C2S_NotifyLoginFailed NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & reason)
#define PARAM_S2C2S_NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & reason)
               
		virtual bool JoinGameRoom ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_S2C2S_JoinGameRoom bool JoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & character_num) PN_OVERRIDE

#define DEFRMI_S2C2S_JoinGameRoom(DerivedClass) bool DerivedClass::JoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & character_num)
#define CALL_S2C2S_JoinGameRoom JoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & character_num)
#define PARAM_S2C2S_JoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & character_num)
               
		virtual bool LeaveGameRoom ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_S2C2S_LeaveGameRoom bool LeaveGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_S2C2S_LeaveGameRoom(DerivedClass) bool DerivedClass::LeaveGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_S2C2S_LeaveGameRoom LeaveGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_S2C2S_LeaveGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool Room_Appear ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const std::wstring & , const int & , const std::wstring & , const int & )		{ 
			return false;
		} 

#define DECRMI_S2C2S_Room_Appear bool Room_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & hostID, const std::wstring & id, const int & character_num, const std::wstring & team_color, const int & team_num) PN_OVERRIDE

#define DEFRMI_S2C2S_Room_Appear(DerivedClass) bool DerivedClass::Room_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & hostID, const std::wstring & id, const int & character_num, const std::wstring & team_color, const int & team_num)
#define CALL_S2C2S_Room_Appear Room_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & hostID, const std::wstring & id, const int & character_num, const std::wstring & team_color, const int & team_num)
#define PARAM_S2C2S_Room_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & hostID, const std::wstring & id, const int & character_num, const std::wstring & team_color, const int & team_num)
               
		virtual bool Room_Disappear ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_S2C2S_Room_Disappear bool Room_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & team_num) PN_OVERRIDE

#define DEFRMI_S2C2S_Room_Disappear(DerivedClass) bool DerivedClass::Room_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & team_num)
#define CALL_S2C2S_Room_Disappear Room_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & team_num)
#define PARAM_S2C2S_Room_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & team_num)
               
		virtual bool GameStartInfo ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const float & , const float & , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_S2C2S_GameStartInfo bool GameStartInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & px, const float & py, const float & pz, const float & rx, const float & ry, const float & rz) PN_OVERRIDE

#define DEFRMI_S2C2S_GameStartInfo(DerivedClass) bool DerivedClass::GameStartInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & px, const float & py, const float & pz, const float & rx, const float & ry, const float & rz)
#define CALL_S2C2S_GameStartInfo GameStartInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & px, const float & py, const float & pz, const float & rx, const float & ry, const float & rz)
#define PARAM_S2C2S_GameStartInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & px, const float & py, const float & pz, const float & rx, const float & ry, const float & rz)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestLogin;
		static const PNTCHAR* RmiName_NotifyLoginSuccess;
		static const PNTCHAR* RmiName_NotifyLoginFailed;
		static const PNTCHAR* RmiName_JoinGameRoom;
		static const PNTCHAR* RmiName_LeaveGameRoom;
		static const PNTCHAR* RmiName_Room_Appear;
		static const PNTCHAR* RmiName_Room_Disappear;
		static const PNTCHAR* RmiName_GameStartInfo;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const std::wstring & , const std::wstring & ) > RequestLogin_Function;
		virtual bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & id, const std::wstring & password) 
		{ 
			if (RequestLogin_Function==nullptr) 
				return true; 
			return RequestLogin_Function(remote,rmiContext, id, password); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyLoginSuccess_Function;
		virtual bool NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyLoginSuccess_Function==nullptr) 
				return true; 
			return NotifyLoginSuccess_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const std::wstring & ) > NotifyLoginFailed_Function;
		virtual bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::wstring & reason) 
		{ 
			if (NotifyLoginFailed_Function==nullptr) 
				return true; 
			return NotifyLoginFailed_Function(remote,rmiContext, reason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > JoinGameRoom_Function;
		virtual bool JoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & character_num) 
		{ 
			if (JoinGameRoom_Function==nullptr) 
				return true; 
			return JoinGameRoom_Function(remote,rmiContext, character_num); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > LeaveGameRoom_Function;
		virtual bool LeaveGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (LeaveGameRoom_Function==nullptr) 
				return true; 
			return LeaveGameRoom_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const std::wstring & , const int & , const std::wstring & , const int & ) > Room_Appear_Function;
		virtual bool Room_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & hostID, const std::wstring & id, const int & character_num, const std::wstring & team_color, const int & team_num) 
		{ 
			if (Room_Appear_Function==nullptr) 
				return true; 
			return Room_Appear_Function(remote,rmiContext, hostID, id, character_num, team_color, team_num); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > Room_Disappear_Function;
		virtual bool Room_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & team_num) 
		{ 
			if (Room_Disappear_Function==nullptr) 
				return true; 
			return Room_Disappear_Function(remote,rmiContext, team_num); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const float & , const float & , const float & , const float & ) > GameStartInfo_Function;
		virtual bool GameStartInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & px, const float & py, const float & pz, const float & rx, const float & ry, const float & rz) 
		{ 
			if (GameStartInfo_Function==nullptr) 
				return true; 
			return GameStartInfo_Function(remote,rmiContext, px, py, pz, rx, ry, rz); 
		}

	};
#endif

}


